
#!/usr/bin/env python3
"""
Working Tournament Bot - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
"""

import asyncio
import logging
import os
import json
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

try:
    import telegram
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    from telegram import Update, BotCommand
    TELEGRAM_AVAILABLE = True
except ImportError as e:
    logger.warning(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Telegram: {e}")
    TELEGRAM_AVAILABLE = False

from dotenv import load_dotenv
from bot.nlp import NLPProcessor
from bot.storage import DataStorage
from bot.localization import Localizer
from bot.validation import ValidationError, validate_team_name, validate_rating

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class WorkingTournamentBot:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –±–æ—Ç"""
    
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        self.admins = [admin.strip().lower() for admin in os.getenv('ADMINS', '').split(',') if admin.strip()]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.storage = DataStorage()
        self.localizer = Localizer()
        self.nlp = NLPProcessor()
        
        logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def is_admin(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        if not username:
            return False
        clean_username = username.lstrip('@').lower()
        return clean_username in self.admins
    
    async def handle_start(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        lang = 'ru' if user.language_code and user.language_code.startswith('ru') else 'en'
        
        welcome_text = self.localizer.get_text("welcome_message", lang)
        instructions_text = self.localizer.get_text("instructions", lang)
        
        await update.message.reply_text(
            f"{welcome_text}\n\n{instructions_text}",
            parse_mode='HTML'
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def handle_help(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = update.effective_user
        lang = 'ru' if user.language_code and user.language_code.startswith('ru') else 'en'
        
        help_text = self.localizer.get_text("help_message", lang)
        examples_text = self.localizer.get_text("command_examples", lang)
        
        await update.message.reply_text(f"{help_text}\n\n{examples_text}", parse_mode='HTML')
    
    async def handle_list(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user = update.effective_user
        lang = 'ru' if user.language_code and user.language_code.startswith('ru') else 'en'
        
        if not self.is_admin(user.username):
            error_text = self.localizer.get_text("admin_only", lang)
            await update.message.reply_text(error_text)
            return
        
        players = self.storage.get_all_players()
        temp_registrations = self.storage.get_temp_registrations()
        
        message_parts = []
        
        # VSA –¢—É—Ä–Ω–∏—Ä
        vsa_players = players.get("vsa", {})
        if vsa_players:
            message_parts.append("üèÜ <b>VSA –¢—É—Ä–Ω–∏—Ä:</b>")
            for username, data in vsa_players.items():
                status = "‚úÖ" if data.get("confirmed") else "‚è≥"
                message_parts.append(f"{status} {username}: {data['name']} ({data['stars']} ‚≠ê)")
        else:
            message_parts.append("üèÜ <b>VSA –¢—É—Ä–Ω–∏—Ä:</b> –ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π")
        
        message_parts.append("")
        
        # H2H –¢—É—Ä–Ω–∏—Ä
        h2h_players = players.get("h2h", {})
        if h2h_players:
            message_parts.append("‚öîÔ∏è <b>H2H –¢—É—Ä–Ω–∏—Ä:</b>")
            for username, data in h2h_players.items():
                status = "‚úÖ" if data.get("confirmed") else "‚è≥"
                message_parts.append(f"{status} {username}: {data['name']} ({data['stars']} ‚≠ê)")
        else:
            message_parts.append("‚öîÔ∏è <b>H2H –¢—É—Ä–Ω–∏—Ä:</b> –ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π")
        
        # –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if temp_registrations:
            message_parts.append("")
            message_parts.append("‚è≥ <b>–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>")
            for user_id, data in temp_registrations.items():
                username = data.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                tournament = data.get("tournament_type", "unknown").upper()
                team_name = data.get("team_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                rating = data.get("rating", 0)
                message_parts.append(f"‚Ä¢ @{username} - {tournament}: {team_name} ({rating} ‚≠ê)")
        
        final_message = "\n".join(message_parts) if message_parts else "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        await update.message.reply_text(final_message, parse_mode='HTML')
        
        logger.info(f"–ê–¥–º–∏–Ω {user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤")
    
    async def handle_stats(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user = update.effective_user
        lang = 'ru' if user.language_code and user.language_code.startswith('ru') else 'en'
        
        if not self.is_admin(user.username):
            error_text = self.localizer.get_text("admin_only", lang)
            await update.message.reply_text(error_text)
            return
        
        stats = self.storage.get_statistics()
        
        message_parts = [
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞:</b>",
            "",
            f"üèÜ VSA –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats['vsa_total']} –≤—Å–µ–≥–æ, {stats['vsa_confirmed']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
            f"‚öîÔ∏è H2H –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats['h2h_total']} –≤—Å–µ–≥–æ, {stats['h2h_confirmed']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", 
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {stats['pending_confirmations']}",
            "",
            f"üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}",
            f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['last_registration_time'] or '–ù–∏–∫–æ–≥–¥–∞'}"
        ]
        
        await update.message.reply_text("\n".join(message_parts), parse_mode='HTML')
        logger.info(f"–ê–¥–º–∏–Ω {user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    async def handle_clear(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user = update.effective_user
        lang = 'ru' if user.language_code and user.language_code.startswith('ru') else 'en'
        
        if not self.is_admin(user.username):
            error_text = self.localizer.get_text("admin_only", lang)
            await update.message.reply_text(error_text)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        args = context.args
        if not args or args[0].lower() != "confirm":
            await update.message.reply_text(
                "‚ö†Ô∏è –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /clear confirm\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
            )
            return
        
        try:
            self.storage.clear_all_data()
            await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—á–∏—â–µ–Ω—ã")
            logger.info(f"–ê–¥–º–∏–Ω {user.username} –æ—á–∏—Å—Ç–∏–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def handle_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
        user = update.effective_user
        message_text = update.message.text
        lang = 'ru' if user.language_code and user.language_code.startswith('ru') else 'en'
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.username}: {message_text}")
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ NLP –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            parsed_command = self.nlp.parse_message(message_text, lang)
            
            if not parsed_command:
                help_text = self.localizer.get_text("unrecognized_command", lang)
                await update.message.reply_text(help_text)
                return
            
            command_type = parsed_command.get("type")
            
            if command_type == "set_team_name":
                await self.handle_team_name(update, context, parsed_command["team_name"], lang)
            
            elif command_type == "set_vsa_rating":
                await self.handle_rating(update, context, "vsa", parsed_command["rating"], lang)
            
            elif command_type == "set_h2h_rating":
                await self.handle_rating(update, context, "h2h", parsed_command["rating"], lang)
            
            elif command_type == "admin_confirm":
                await self.handle_admin_confirm(update, context, parsed_command["username"], lang)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            error_text = self.localizer.get_text("processing_error", lang)
            await update.message.reply_text(error_text)
    
    async def handle_team_name(self, update, context, team_name: str, lang: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        user = update.effective_user
        
        try:
            validate_team_name(team_name)
            
            if "registration_data" not in context.user_data:
                context.user_data["registration_data"] = {}
            
            context.user_data["registration_data"]["team_name"] = team_name
            context.user_data["registration_data"]["timestamp"] = datetime.now()
            
            success_text = self.localizer.get_text("team_name_saved", lang).format(team_name=team_name)
            next_step_text = self.localizer.get_text("next_step_rating", lang)
            
            await update.message.reply_text(f"{success_text}\n\n{next_step_text}")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}")
            
        except ValidationError as e:
            error_text = self.localizer.get_text("validation_error", lang).format(error=str(e))
            await update.message.reply_text(error_text)
    
    async def handle_rating(self, update, context, tournament_type: str, rating: int, lang: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        user = update.effective_user
        
        try:
            validate_rating(rating)
            
            registration_data = context.user_data.get("registration_data", {})
            if "team_name" not in registration_data:
                error_text = self.localizer.get_text("team_name_required", lang)
                await update.message.reply_text(error_text)
                return
            
            team_name = registration_data["team_name"]
            
            success = await self.storage.save_temp_registration(
                user_id=user.id,
                username=user.username,
                tournament_type=tournament_type,
                team_name=team_name,
                rating=rating
            )
            
            if success:
                success_text = self.localizer.get_text("rating_saved", lang).format(
                    tournament=tournament_type.upper(), 
                    rating=rating
                )
                confirm_text = self.localizer.get_text("awaiting_confirmation", lang)
                await update.message.reply_text(f"{success_text}\n\n{confirm_text}")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ {tournament_type}: {rating}")
            else:
                error_text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä."
                await update.message.reply_text(error_text)
            
        except ValidationError as e:
            error_text = self.localizer.get_text("validation_error", lang).format(error=str(e))
            await update.message.reply_text(error_text)
    
    async def handle_admin_confirm(self, update, context, target_username: str, lang: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        user = update.effective_user
        
        if not self.is_admin(user.username):
            error_text = self.localizer.get_text("admin_only", lang)
            await update.message.reply_text(error_text)
            return
        
        # –ü–æ–∏—Å–∫ –æ–∂–∏–¥–∞—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        temp_registrations = self.storage.get_temp_registrations()
        target_data = None
        target_user_id = None
        
        for user_id, data in temp_registrations.items():
            if data.get("username", "").lower() == target_username.lower():
                target_data = data
                target_user_id = user_id
                break
        
        if not target_data:
            error_text = f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–ª—è @{target_username}"
            await update.message.reply_text(error_text)
            return
        
        success = self.storage.confirm_registration(target_user_id)
        
        if success:
            success_text = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è @{target_username} –≤ {target_data['tournament_type'].upper()}: {target_data['team_name']}"
            await update.message.reply_text(success_text)
            logger.info(f"–ê–¥–º–∏–Ω {user.username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è {target_username}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
    
    async def set_commands(self, application):
        """–£–±—Ä–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é"""
        try:
            await application.bot.set_my_commands([])
            logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not TELEGRAM_AVAILABLE:
            logger.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
            return
        
        if not self.token:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        logger.info("–ó–∞–ø—É—Å–∫ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(self.token).build()
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é Telegram
        await self.set_commands(application)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        application.add_handler(CommandHandler("start", self.handle_start))
        application.add_handler(CommandHandler("help", self.handle_help))
        application.add_handler(CommandHandler("list", self.handle_list))
        application.add_handler(CommandHandler("stats", self.handle_stats))
        application.add_handler(CommandHandler("clear", self.handle_clear))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
        asyncio.create_task(self.storage.periodic_cleanup())
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await application.run_polling(drop_pending_updates=True)

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        bot = WorkingTournamentBot()
        await bot.run()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    if TELEGRAM_AVAILABLE:
        asyncio.run(main())
    else:
        print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
        print("–ó–∞–ø—É—Å–∫ –¥–µ–º–æ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ...")
        import subprocess
        subprocess.run(["python", "simple_production_demo.py"])
