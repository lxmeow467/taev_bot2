version: '3.8'

services:
  esports-bot:
    build: .
    container_name: esports-tournament-bot
    restart: unless-stopped
    
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMINS=${ADMINS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_TEAM_NAME_LENGTH=${MAX_TEAM_NAME_LENGTH:-50}
      - MIN_RATING=${MIN_RATING:-0}
      - MAX_RATING=${MAX_RATING:-100}
    
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    
    # Optional: For webhook mode
    # ports:
    #   - "8080:8080"
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits (adjust based on your needs)
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Optional: Redis for caching and session management (for high-scale deployments)
  # redis:
  #   image: redis:7-alpine
  #   container_name: esports-bot-redis
  #   restart: unless-stopped
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --appendonly yes

  # Optional: PostgreSQL for database persistence (for high-scale deployments)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: esports-bot-postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: esports_bot
  #     POSTGRES_USER: botuser
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data

# Optional volumes for database persistence
# volumes:
#   redis_data:
#   postgres_data: