#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import logging
import os
import json
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

try:
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    from telegram import Update
    TELEGRAM_AVAILABLE = True
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Telegram: {e}")
    TELEGRAM_AVAILABLE = False
    exit(1)

from dotenv import load_dotenv
from bot.nlp import NLPProcessor
from bot.storage import DataStorage
from bot.localization import Localizer
from bot.validation import ValidationError, validate_team_name, validate_rating

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class TournamentBot:
    """–¢—É—Ä–Ω–∏—Ä–Ω—ã–π –±–æ—Ç"""

    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        if not self.token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        self.admins = [admin.strip().lower() for admin in os.getenv('ADMINS', '').split(',') if admin.strip()]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.storage = DataStorage()
        self.localizer = Localizer()
        self.nlp = NLPProcessor()

        logger.info("–¢—É—Ä–Ω–∏—Ä–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def is_admin(self, update, context) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            user = update.effective_user
            chat = update.effective_chat

            member = await context.bot.get_chat_member(chat.id, user.id)
            return member.status in ['administrator', 'creator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
            return False

    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        welcome_text = (
            "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –±–æ—Ç!\n\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
            "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: –ë–æ—Ç, –º–æ–π –Ω–∏–∫ –ù–∞–∑–≤–∞–Ω–∏–µ–ö–æ–º–∞–Ω–¥—ã\n"
            "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥: –ë–æ—Ç, –º–æ–π —Ä–µ–∫–æ—Ä–¥ –≤ VSA 99\n\n"
            "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
        )
        await update.message.reply_text(welcome_text)

    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = (
            "‚ùì –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
            "üî∏ –ë–æ—Ç, –º–æ–π –Ω–∏–∫ –ù–∞–∑–≤–∞–Ω–∏–µ–ö–æ–º–∞–Ω–¥—ã\n"
            "üî∏ –ë–æ—Ç, –º–æ–π —Ä–µ–∫–æ—Ä–¥ –≤ VSA —á–∏—Å–ª–æ\n"
            "üî∏ –ë–æ—Ç, –º–æ–π —Ä–µ–∫–æ—Ä–¥ –≤ H2H —á–∏—Å–ª–æ\n\n"
            "–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/roster - —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )
        await update.message.reply_text(help_text)

    async def handle_roster(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /roster"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        players = self.storage.get_all_players()
        temp_registrations = self.storage.get_temp_registrations()

        message_parts = []

        # VSA –¢—É—Ä–Ω–∏—Ä
        vsa_players = players.get("vsa", {})
        if vsa_players:
            message_parts.append("üèÜ VSA –¢—É—Ä–Ω–∏—Ä:")
            for username, data in vsa_players.items():
                status = "‚úÖ" if data.get("confirmed") else "‚è≥"
                message_parts.append(f"{status} {username}: {data['name']} ({data['stars']} ‚≠ê)")

        # H2H –¢—É—Ä–Ω–∏—Ä
        h2h_players = players.get("h2h", {})
        if h2h_players:
            message_parts.append("‚öîÔ∏è H2H –¢—É—Ä–Ω–∏—Ä:")
            for username, data in h2h_players.items():
                status = "‚úÖ" if data.get("confirmed") else "‚è≥"
                message_parts.append(f"{status} {username}: {data['name']} ({data['stars']} ‚≠ê)")

        # –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if temp_registrations:
            message_parts.append("\n‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
            for user_id, data in temp_registrations.items():
                username = data.get("username", "Unknown")
                tournament = data.get("tournament_type", "unknown").upper()
                team_name = data.get("team_name", "Unknown")
                rating = data.get("rating", 0)
                message_parts.append(f"‚Ä¢ @{username} - {tournament}: {team_name} ({rating} ‚≠ê)")

        final_message = "\n".join(message_parts) if message_parts else "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–µ—Ç"
        await update.message.reply_text(final_message)

    async def handle_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        stats = self.storage.get_statistics()

        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üèÜ VSA: {stats['vsa_total']} –≤—Å–µ–≥–æ, {stats['vsa_confirmed']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n"
            f"‚öîÔ∏è H2H: {stats['h2h_total']} –≤—Å–µ–≥–æ, {stats['h2h_confirmed']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {stats['pending_confirmations']}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}"
        )
        await update.message.reply_text(stats_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username or user.first_name}: {message_text}")

        try:
            parsed_command = self.nlp.parse_message(message_text, "ru")

            if not parsed_command:
                await update.message.reply_text(
                    "‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ –ë–æ—Ç, –º–æ–π –Ω–∏–∫ –ù–∞–∑–≤–∞–Ω–∏–µ–ö–æ–º–∞–Ω–¥—ã\n"
                    "‚Ä¢ –ë–æ—Ç, –º–æ–π —Ä–µ–∫–æ—Ä–¥ –≤ VSA —á–∏—Å–ª–æ\n"
                    "‚Ä¢ –ë–æ—Ç, –º–æ–π —Ä–µ–∫–æ—Ä–¥ –≤ H2H —á–∏—Å–ª–æ"
                )
                return

            command_type = parsed_command.get("type")

            if command_type == "set_team_name":
                await self.handle_team_name(update, context, parsed_command["team_name"])
            elif command_type == "set_vsa_rating":
                await self.handle_rating(update, context, "vsa", parsed_command["rating"])
            elif command_type == "set_h2h_rating":
                await self.handle_rating(update, context, "h2h", parsed_command["rating"])
            elif command_type == "admin_confirm":
                await self.handle_admin_confirm(update, context, parsed_command["username"])
            elif command_type == "admin_reject":
                await self.handle_admin_reject(update, context, parsed_command["username"])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

    async def handle_team_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, team_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        try:
            validate_team_name(team_name)

            if "registration_data" not in context.user_data:
                context.user_data["registration_data"] = {}

            context.user_data["registration_data"]["team_name"] = team_name

            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {team_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:\n"
                f"‚Ä¢ –ë–æ—Ç, –º–æ–π —Ä–µ–∫–æ—Ä–¥ –≤ VSA —á–∏—Å–ª–æ\n"
                f"‚Ä¢ –ë–æ—Ç, –º–æ–π —Ä–µ–∫–æ—Ä–¥ –≤ H2H —á–∏—Å–ª–æ"
            )

        except ValidationError as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def handle_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE, tournament_type: str, rating: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        try:
            validate_rating(rating)

            registration_data = context.user_data.get("registration_data", {})
            if "team_name" not in registration_data:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
                return

            team_name = registration_data["team_name"]
            user = update.effective_user

            success = await self.storage.save_temp_registration(
                user_id=user.id,
                username=user.username or user.first_name,
                tournament_type=tournament_type,
                team_name=team_name,
                rating=rating
            )

            if success:
                await update.message.reply_text(
                    f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ {tournament_type.upper()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {rating} ‚≠ê\n\n"
                    f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
            else:
                await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä")

        except ValidationError as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def handle_admin_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, target_username: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        temp_registrations = self.storage.get_temp_registrations()
        target_user_id = None

        for user_id, data in temp_registrations.items():
            if data.get("username", "").lower() == target_username.lower():
                target_user_id = user_id
                break

        if target_user_id:
            success = self.storage.confirm_registration(target_user_id)
            if success:
                await update.message.reply_text(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è @{target_username}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        else:
            await update.message.reply_text(f"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    async def handle_admin_reject(self, update: Update, context: ContextTypes.DEFAULT_TYPE, target_username: str):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        temp_registrations = self.storage.get_temp_registrations()
        target_user_id = None

        for user_id, data in temp_registrations.items():
            if data.get("username", "").lower() == target_username.lower():
                target_user_id = user_id
                break

        if target_user_id:
            success = self.storage.reject_registration(target_user_id)
            if success:
                await update.message.reply_text(f"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è @{target_username}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
        else:
            await update.message.reply_text(f"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    async def handle_comande(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /comande"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        command_text = (
            "üéÆ –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/help - –ü–æ–º–æ—â—å\n"
            "/roster - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞\n"
            "/delplayer @username - –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
            "/comande - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ –ë–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å @username\n"
             "‚Ä¢ –ë–æ—Ç @username +1 –¥–æ–±–∞–≤–∏—Ç—å\n"
            "‚Ä¢ –ë–æ—Ç @username - 1 –æ—Ç–∫–ª–æ–Ω–∏—Ç—å"
        )
        await update.message.reply_text(command_text)

    async def handle_delplayer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /delplayer –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "–ü—Ä–∏–º–µ—Ä: /delplayer @username"
            )
            return

        target_username = context.args[0].replace("@", "").lower()

        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        temp_registrations = self.storage.get_temp_registrations()
        temp_deleted = False
        for user_id, data in list(temp_registrations.items()):
            if data.get("username", "").lower() == target_username:
                success = self.storage.reject_registration(int(user_id))
                if success:
                    temp_deleted = True
                    break

        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        players = self.storage.get_all_players()
        confirmed_deleted = False
        tournament_deleted = None

        for tournament_type in ["vsa", "h2h"]:
            tournament_players = players.get(tournament_type, {})
            for username_key in list(tournament_players.keys()):
                if username_key.lower() == target_username:
                    success = self.storage.remove_confirmed_player(tournament_type, username_key)
                    if success:
                        confirmed_deleted = True
                        tournament_deleted = tournament_type.upper()
                        break

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if temp_deleted and confirmed_deleted:
            await update.message.reply_text(
                f"‚úÖ –ò–≥—Ä–æ–∫ @{target_username} —É–¥–∞–ª–µ–Ω –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_deleted}"
            )
        elif temp_deleted:
            await update.message.reply_text(
                f"‚úÖ –ò–≥—Ä–æ–∫ @{target_username} —É–¥–∞–ª–µ–Ω –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            )
        elif confirmed_deleted:
            await update.message.reply_text(
                f"‚úÖ –ò–≥—Ä–æ–∫ @{target_username} —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_deleted}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ò–≥—Ä–æ–∫ @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–∞—Ö"
            )

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        application = Application.builder().token(self.token).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.handle_start))
        application.add_handler(CommandHandler("help", self.handle_help))
        application.add_handler(CommandHandler("roster", self.handle_roster))
        application.add_handler(CommandHandler("stats", self.handle_stats))
        application.add_handler(CommandHandler("comande", self.handle_comande))
        application.add_handler(CommandHandler("delplayer", self.handle_delplayer))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            await application.initialize()
            await application.start()
            await application.updater.start_polling(drop_pending_updates=True)

            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
            await asyncio.Event().wait()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        finally:
            await application.stop()
            await application.shutdown()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = TournamentBot()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())